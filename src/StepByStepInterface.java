import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Jullian
 */
public class StepByStepInterface extends javax.swing.JFrame {
    public static List<String> Stopwords= new ArrayList<String>();
    public static File stopwordfile = new File("src//stopwords.txt");
    public Article FileArticle;
    public boolean input = false;
    public boolean par = false;
    public boolean lead = false;
    public boolean supp = false;
    public StepByStepInterface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Parse = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        OutputField = new javax.swing.JTextArea();
        SelectedParagraph = new javax.swing.JButton();
        LeadSentenceFinding = new javax.swing.JButton();
        SupportingSentenceFinding = new javax.swing.JButton();
        ViewOutputSummary = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Output");

        Parse.setText("Input");
        Parse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParseActionPerformed(evt);
            }
        });

        jButton1.setText("Paragraph Selection");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        OutputField.setEditable(false);
        OutputField.setColumns(20);
        OutputField.setLineWrap(true);
        OutputField.setRows(5);
        jScrollPane1.setViewportView(OutputField);

        SelectedParagraph.setText("View Selected Paragraph");
        SelectedParagraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectedParagraphActionPerformed(evt);
            }
        });

        LeadSentenceFinding.setText("Lead Sentence Finding");
        LeadSentenceFinding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeadSentenceFindingActionPerformed(evt);
            }
        });

        SupportingSentenceFinding.setText("Supporting Sentence Finding");
        SupportingSentenceFinding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SupportingSentenceFindingActionPerformed(evt);
            }
        });

        ViewOutputSummary.setText("View Output Summary");
        ViewOutputSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewOutputSummaryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Parse)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SelectedParagraph))
                            .addComponent(LeadSentenceFinding)
                            .addComponent(SupportingSentenceFinding)
                            .addComponent(ViewOutputSummary)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Parse)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(SelectedParagraph))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LeadSentenceFinding)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SupportingSentenceFinding)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ViewOutputSummary)
                        .addGap(0, 258, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ParseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParseActionPerformed
        Charset charset = Charset.forName("US-ASCII");
        try (BufferedReader reader = Files.newBufferedReader(stopwordfile.toPath(), charset)) {
            String line = null;
            while ((line = reader.readLine()) != null) {
                Stopwords.add(line);
            }
            reader.close();
        } catch (IOException x) {
            System.err.format("IOException: %s%n", x);
        }        
        final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("Plain Text Files", "txt"));
        fc.showOpenDialog(null);
        File file_source = fc.getSelectedFile();
           
        //input file
        String arg = file_source.getAbsolutePath();
        if(arg.equals("")){
            OutputField.setText("");
            return;
        }
        try {
            FileArticle = new Article(arg);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(StepByStepInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        OutputField.setText(FileArticle.toString());
        
    input = true;
    par = false;
    lead = false;
    supp = false;        
    }//GEN-LAST:event_ParseActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(input == false){
            JOptionPane.showMessageDialog(rootPane, "Input File First.");
            return;
        }
        FileArticle.Score_Abstract_Sentence_To_Paragprahs();
        OutputField.setText(FileArticle.ScoredContent);
        par = true;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void SelectedParagraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectedParagraphActionPerformed
        // TODO add your handling code here:
        if(input == false){
            JOptionPane.showMessageDialog(rootPane, "Input File First.");
            return;
        }
        if(par == false){
            JOptionPane.showMessageDialog(rootPane, "Error. Please perform paragraph selection.");
            return;
        }
        
        OutputField.setText(FileArticle.RepresentationStrings);
    }//GEN-LAST:event_SelectedParagraphActionPerformed

    private void LeadSentenceFindingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeadSentenceFindingActionPerformed
        // TODO add your handling code here:
        if(input == false){
            JOptionPane.showMessageDialog(rootPane, "Input File First.");
            return;
        }
        if(par == false){
            JOptionPane.showMessageDialog(rootPane, "Error. Please perform paragraph selection.");
            return;
        }        
        FileArticle.FindLeadSentenceOfRepresentedParagraphs();
        OutputField.setText(FileArticle.LeadSentencesString);
        lead = true;
    }//GEN-LAST:event_LeadSentenceFindingActionPerformed

    private void SupportingSentenceFindingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SupportingSentenceFindingActionPerformed
        if(input == false){
            JOptionPane.showMessageDialog(rootPane, "Input File First.");
            return;
        }
        if(par == false){
            JOptionPane.showMessageDialog(rootPane, "Error. Please perform paragraph selection.");
            return;
        }       
        if(lead == false){
            JOptionPane.showMessageDialog(rootPane, "Error. Please perform Lead Sentence Finding.");
            return;
        }        
        FileArticle.RankRepresentedParagraphs();
        OutputField.setText(FileArticle.GraphSummary);
        supp = true;
    }//GEN-LAST:event_SupportingSentenceFindingActionPerformed

    private void ViewOutputSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewOutputSummaryActionPerformed
        // TODO add your handling code here:
        if(input == false){
            JOptionPane.showMessageDialog(rootPane, "Input File First.");
            return;
        }
        if(par == false){
            JOptionPane.showMessageDialog(rootPane, "Error. Please perform paragraph selection.");
            return;
        }       
        if(lead == false){
            JOptionPane.showMessageDialog(rootPane, "Error. Please perform Lead Sentence Finding.");
            return;
        }        
        if(supp == false){
            JOptionPane.showMessageDialog(rootPane, "Error. Please perform Support Sentence Finding.");
            return;
        }        
        OutputField.setText(FileArticle.SummaryString);
    }//GEN-LAST:event_ViewOutputSummaryActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StepByStepInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StepByStepInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StepByStepInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StepByStepInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StepByStepInterface().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LeadSentenceFinding;
    private javax.swing.JTextArea OutputField;
    private javax.swing.JButton Parse;
    private javax.swing.JButton SelectedParagraph;
    private javax.swing.JButton SupportingSentenceFinding;
    private javax.swing.JButton ViewOutputSummary;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
